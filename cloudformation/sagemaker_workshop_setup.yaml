AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  This template can be used to deploy the Behavioral Cloning with SageMaker Workshop.
  Please see the "README.md" file for instructions.

Parameters:
  GitHubUser:
    Type: String
    Description: GitHub username.
  GitHubRepo:
    Type: String
    Default: RoboStig
    Description: The repository name of the Behavioral Clonning Workshop.
    AllowedPattern: "[A-Za-z0-9_.-]*"
    MaxLength: 50
  GitHubBranch:
    Type: String
    Default: setup
    Description: The branch of the repository to deploy.
  GitHubToken:
    Type: String
    Description: >
      Token for the user specified above. (https://github.com/settings/tokens)
  TrainingInstanceType:
    Description: Instance type to launch trained production model endpoint with. 
    Type: String
    Default: ml.p3.8xlarge
  ProductionInstanceType:
    Description: Instance type to launch trained production model endpoint with. 
    Type: String
    Default: ml.c4.xlarge
  SageMakerExecutionRole:
    Description: ARN of IAM role SageMaker can assume to access model artifacts and docker image for training and deployment on ML compute instances.
    Type: String
    NoEcho: true
  ModelPrefix: 
    Description: Prefix to prepend to resources created for the model (Must be lower-case).
    Type: String
    Default: pystig
    AllowedPattern: "[a-z]*"
  EmailAddress:
    Description: E-Mail Address to send deployment updates to.
    Type: String
  S3Bucket:
    Description: >
      Name of the S3 Bucket for deployment and training asets, e.g. sagemaker-workshop-<<ACCOUNT ID>>-us-west-2
    Type: String

Resources:
  SNSTopic:
    Type: AWS::SNS::Topic
    Description: Deployment status messages.
    Properties:
      DisplayName: SageMaker WorkShop Status
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email
      TopicName: !Sub ${AWS::StackName}-SNS

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Description: CodePipeline Artifacts.

  Repository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    Properties:
      RepositoryName: !Sub ${ModelPrefix}
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          -
            Sid: AllowPull
            Effect: Allow
            Principal: "*"
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - codepipeline:Get*
                  - codebuild:BatchGetBuilds
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource:
                  - !Sub arn:aws:s3:::${S3Bucket}/*
                  - !Sub arn:aws:s3:::${S3Bucket}
                Effect: Allow
                Action:
                  - s3:*
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                  - !Sub arn:aws:s3:::${S3Bucket}
                  - !Sub arn:aws:s3:::${S3Bucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - lambda:*
                  - iam:PassRole

  TrainContainerBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              commands:
                - apt-get update && apt-get -y install python-pip
                - pip install --upgrade python
                - pip install --upgrade awscli
            pre_build:
              commands: 
                - printenv
                - printf "%s:%s" "$REPOSITORY_URI" "keras-gpu" > /tmp/build_tag.out
                - printf '{"tag":"%s"}' "$(cat /tmp/build_tag.out)" > /tmp/build.json
                - $(aws ecr get-login --no-include-email)
            build:
              commands:
                - docker build -t "$(cat /tmp/build_tag.out)" -f Dockerfile.gpu .
            post_build:
              commands:
                - docker push "$(cat /tmp/build_tag.out)"
          artifacts:
            files: /tmp/build.json
            discard-paths: yes
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:17.09.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
      Name: train-container-build
      ServiceRole: !Ref CodeBuildServiceRole

  ServeContainerBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              commands:
                - apt-get update && apt-get -y install python-pip
                - pip install --upgrade python
                - pip install --upgrade awscli
            pre_build:
              commands: 
                - printenv
                - printf "%s:%s" "$REPOSITORY_URI" "keras-cpu" > /tmp/build_tag.out
                - printf '{"tag":"%s"}' "$(cat /tmp/build_tag.out)" > /tmp/build.json
                - $(aws ecr get-login --no-include-email)
            build:
              commands:
                - docker build -t "$(cat /tmp/build_tag.out)" -f Dockerfile.cpu .
            post_build:
              commands:
                - docker push "$(cat /tmp/build_tag.out)"
          artifacts:
            files: /tmp/build.json
            discard-paths: yes
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:17.09.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
      Name: serve-container-build
      ServiceRole: !Ref CodeBuildServiceRole

  DataUploadProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.1
          phases:
            install:
              commands:
                - apt-get update && apt-get -y install python-pip wget curl
                - pip install --upgrade python
                - pip install --upgrade awscli
            pre_build:
              commands:
                - printenv
                - wget $DATA_SOURCE
                - aws s3 cp ./data.zip s3://$S3_BUCKET/data/data.zip
#                - aws s3 cp ./data.zip s3://$S3_BUCKET/data/data.zip --acl public-read
                - unzip ./data.zip
                - rm -rf __*
                - aws s3 cp --recursive  ./data s3://$S3_BUCKET/data
#                - aws s3 cp --recursive  ./data s3://$S3_BUCKET/data --acl public-read
#                - aws s3api put-bucket-acl --bucket $S3_BUCKET --acl public-read
#                - aws s3api get-bucket-acl --bucket $S3_BUCKET
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: aws/codebuild/python:2.7.12
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: DATA_SOURCE
            Value: "https://s3-us-west-2.amazonaws.com/robostig-assets-us-west-2/data/data.zip"
          - Name: S3_BUCKET
            Value: !Ref S3Bucket
      Name: training-data-upload
      ServiceRole: !Ref CodeBuildServiceRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: CodeSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: Code
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: TrainBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref TrainContainerBuildProject
              InputArtifacts:
                - Name: Code
              OutputArtifacts:
                - Name: TrainBuildOutput
              RunOrder: 1
            - Name: ServeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ServeContainerBuildProject
              InputArtifacts:
                - Name: Code
              OutputArtifacts:
                - Name: ServeBuildOutput
              RunOrder: 1
            - Name: DataUpload
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref DataUploadProject
              InputArtifacts:
                - Name: Code
              OutputArtifacts:
                - Name: DataUploadOutput
              RunOrder: 1
        - Name: TrainAndDeploy
          Actions:
            - Name: StartSateMachine
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Ref ExecuteStateMachineFunction
              RunOrder: 1

  SageMakerStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |-
        {
          "StartAt": "StartTrainingJob",
          "States": {
            "StartTrainingJob": {
              "Type": "Task",
              "Resource": "${StartTrainingJobFunction.Arn}",
              "ResultPath": "$",
              "Next": "Notify"
            },
            "CheckStatusBranch": {
              "Type": "Choice",
              "Choices": [{
                  "Or": [{
                      "Variable": "$.status",
                      "StringEquals": "Completed"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "InService"
                    }
                  ],
                  "Next": "Notify"
                },
                {
                  "Or": [{
                      "Variable": "$.status",
                      "StringEquals": "InProgress"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "Creating"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "Updating"
                    }
                  ],
                  "Next": "CheckStatusWait"
                },
                {
                  "Or": [{
                      "Variable": "$.status",
                      "StringEquals": "Failed"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "RollingBack"
                    }
                  ],
                  "Next": "Notify"
                }
              ]
            },
            "CheckStatusWait": {
              "Type": "Wait",
              "Seconds": 60,
              "Next": "GetStatus"
            },
            "GetStatus": {
              "Type": "Task",
              "Resource": "${GetStatusFunction.Arn}",
              "ResultPath": "$",
              "Next": "CheckStatusBranch"
            },
            "NotifyBranch": {
              "Type": "Choice",
              "Choices": [{
                  "Or": [{
                      "Variable": "$.status",
                      "StringEquals": "InProgress"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "Creating"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "Updating"
                    }
                  ],
                  "Next": "CheckStatusWait"
                },
                {
                  "And": [{
                      "Variable": "$.status",
                      "StringEquals": "Failed"
                    },
                    {
                      "Variable": "$.stage",
                      "StringEquals": "Training"
                    }
                  ],
                  "Next": "JobFailed"
                },
                {
                  "Variable": "$.status",
                  "StringEquals": "Completed",
                  "Next": "JobCompleted"
                },
                {
                  "Variable": "$.status",
                  "StringEquals": "InService",
                  "Next": "DeploymentCompleted"
                },
                {
                  "And": [{
                      "Or": [{
                          "Variable": "$.status",
                          "StringEquals": "Failed"
                        },
                        {
                          "Variable": "$.status",
                          "StringEquals": "RollingBack"
                        }
                      ]
                    },
                    {
                      "Variable": "$.stage",
                      "StringEquals": "Deployment"
                    }
                  ],
                  "Next": "DeploymentFailed"
                }
              ]
            },
            "Notify": {
              "Type": "Task",
              "Resource": "${NotifyFunction.Arn}",
              "Next": "NotifyBranch"
            },
            "JobCompleted": {
              "Type": "Pass",
              "Next": "DeployModel"
            },
            "JobFailed": {
              "Type": "Fail"
            },
            "DeployModel": {
              "Type": "Task",
              "Resource": "${DeployModelFunction.Arn}",
              "Next": "Notify"
            },
            "DeploymentCompleted": {
              "Type": "Succeed"
            },
            "DeploymentFailed": {
              "Type": "Fail"
            }
          }
        }
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn

  StepFunctionExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: !Sub states.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  GetStatusFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: get_status.lambda_handler
      Runtime: python3.6
      CodeUri: ../lambda_functions/
      Description: 'Checks status of SageMaker training jobs and endpoint deployment'
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "sagemaker:DescribeEndpoint"
                - "sagemaker:DescribeTrainingJob"
              Resource: "*"

  DeployModelFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: deploy_model.lambda_handler
      Runtime: python3.6
      CodeUri: ../lambda_functions/
      Description: 'Deploys trained model to invokable endpoint'
      Timeout: 10
      Environment:
        Variables:
          EXECUTION_ROLE: !Ref SageMakerExecutionRole
          INSTANCE_TYPE: !Ref ProductionInstanceType
          CONTAINER: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          TAG: 'keras-cpu'
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "sagemaker:UpdateEndpoint"
                - "sagemaker:CreateModel"
                - "sagemaker:CreateEndpointConfig"
                - "sagemaker:DescribeEndpoint"
                - "sagemaker:CreateEndpoint"
              Resource: "*"
            - Effect: "Allow"
              Action:
                - "iam:PassRole"
              Resource: !Ref SageMakerExecutionRole

  StartTrainingJobFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: start_training_job.lambda_handler
      Runtime: python3.6
      CodeUri: ../lambda_functions/
      Description: 'Starts model training job'
      Environment:
        Variables:
          SAGEMAKER_ROLE: !Ref SageMakerExecutionRole
          TRAINING_INSTANCE_TYPE: !Ref TrainingInstanceType
          CONTAINER: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          TAG: 'keras-gpu'
          MODEL_PREFIX: !Ref ModelPrefix
          OUTPUT_PATH: !Sub s3://${S3Bucket}/models/${ModelPrefix}/
          S3_URI: !Sub s3://${S3Bucket}
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "sagemaker:CreateTrainingJob"
              Resource: "*"
            - Effect: "Allow"
              Action:
                - "iam:PassRole"
              Resource: !Ref SageMakerExecutionRole

  NotifyFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: notify.lambda_handler
      Runtime: python3.6
      CodeUri: ../lambda_functions/
      Description: 'Posts message to SNS'
      Environment:
        Variables:
          SNS: !Ref SNSTopic
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "sns:Publish"
              Resource: !Ref SNSTopic

  ExecuteStateMachineFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: start_statemachine.lambda_handler
      Runtime: python3.6
      CodeUri: ../lambda_functions/
      Description: 'Trigger Step Function'
      Environment:
        Variables:
          SFN_ARN: !Ref SageMakerStateMachine
          MODEL_PREFIX: !Ref ModelPrefix
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "states:*"
                - "codepipeline:PutJobSuccessResult"
                - "codepipeline:PutJobFailureResult"
              Resource: "*"

Outputs:
  CodePipelineURL:
    Description: Link to CodePipeline
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}

  TrainingDataDownloadURL:
    Description: Link to the .zip file for Module 1 Training Data.
    Value: !Sub https://s3-${AWS::Region}.amazonaws.com/${S3Bucket}/data/data.zip

  TrainingDataBucket:
    Description: S3 Bucket containing the Module 4 Training Data --> data_bucket
    Value: !Sub s3://${S3Bucket}
  
  ModelTrainingImage:
    Description: ECR Image for Module 4 --> training_image
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:keras-gpu
  
  ModelServingImage:
    Description: ECR Image for Module 4 --> hosting_image
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:keras-cpu