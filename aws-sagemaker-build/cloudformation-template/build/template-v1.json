{
  "Parameters": {
    "NoteBookInstanceType": {
      "Type": "String",
      "Default": "ml.t2.medium",
      "AllowedValues": [
        "ml.t2.medium",
        "ml.m4.xlarge",
        "ml.p2.xlarge",
        "USE_EXTERNAL"
      ],
      "Description": "The SageMaker Notebook Instance type that will be created and pre-populated with a sagebuild tutorial notebook"
    },
    "AccessRoleArn": {
      "Type": "String",
      "Default": "EMPTY",
      "Description": "(Optional) An AWS IAM Role Arn for CloudFormation to attach a policy to give access to SageBuild resources. Use this to give an existing SageMaker Notebook Instance access to SageBuild."
    },
    "ExternalDataBucket": {
      "Type": "String",
      "Default": "CREATE_BUCKET",
      "Description": "(Optional) S3 Bucket to use for training data"
    },
    "ExternalLaunchTopic": {
      "Type": "String",
      "Default": "EMPTY",
      "Description": "(Optional) Additional SNS Topic Used to trigger rebuilds"
    },
    "ExternalCodeCommitRepo": {
      "Type": "String",
      "Default": "CREATE_REPO",
      "Description": "(Optional) AWS CodeCommit repository that contains Dockerfile code."
    },
    "ExternalGithubRepo": {
      "Type": "String",
      "Default": "USE_CODECOMMIT_REPO",
      "Description": "(Optional) Http clone URL of a Github repository that contians Dockerfile code."
    },
    "BranchBuildTrigger": {
      "Type": "CommaDelimitedList",
      "Default": "master",
      "Description": "Comma seperated list of branchs in the code repository that trigger a build when changed"
    }
  },
  "Conditions": {
    "LaunchNoteBookInstance": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "NoteBookInstanceType"
            },
            "USE_EXTERNAL"
          ]
        }
      ]
    },
    "AttachAccessPolicy": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AccessRoleArn"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "CreateDataBucket": {
      "Fn::Equals": [
        {
          "Ref": "ExternalDataBucket"
        },
        "CREATE_BUCKET"
      ]
    },
    "CreateRepo": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "ExternalCodeCommitRepo"
            },
            "CREATE_REPO"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "ExternalGithubRepo"
            },
            "USE_CODECOMMIT_REPO"
          ]
        }
      ]
    },
    "CreateRepoTrigger": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ExternalGithubRepo"
            },
            "USE_CODECOMMIT_REPO"
          ]
        }
      ]
    },
    "IsCodeCommitRepo": {
      "Fn::Equals": [
        {
          "Ref": "ExternalGithubRepo"
        },
        "USE_CODECOMMIT_REPO"
      ]
    },
    "SubscribeToExternalTopic": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ExternalLaunchTopic"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "InvalidConfiguration": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "ExternalGithubRepo"
                },
                "USE_CODECOMMIT_REPO"
              ]
            }
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "ExternalCodeCommitRepo"
                },
                "CREATE_REPO"
              ]
            }
          ]
        }
      ]
    }
  },
  "Outputs": {
    "NoteBookInstance": {
      "Value": {
        "Fn::If": [
          "LaunchNoteBookInstance",
          {
            "Fn::Sub": "https://console.aws.amazon.com/sagemaker/home?region=${AWS::Region}#/notebook-instances/${AWS::StackName}"
          },
          {
            "Ref": "AWS::NoValue"
          }
        ]
      },
      "Description": "AWS Console url of your sagemaker notebook instance, from here you can open the instance"
    },
    "DashboardUrl": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/cloudwatch/home?",
            "region=",
            {
              "Ref": "AWS::Region"
            },
            "#dashboards:name=",
            {
              "Ref": "dashboard"
            }
          ]
        ]
      },
      "Description": "CloudWatch Dashboard that tracks Lambda, SageMaker, and step function metrics"
    },
    "TrainStatusTopic": {
      "Value": {
        "Ref": "TrainStatusTopic"
      },
      "Description": "SNS topic that gives success or failure updates of build"
    },
    "LaunchTopic": {
      "Value": {
        "Ref": "LaunchTopic"
      },
      "Description": "Topic that triggers a new build/train. Use this value to setup github webhook triggers."
    },
    "SageMakerEndpoint": {
      "Value": {
        "Fn::GetAtt": [
          "Variables",
          "EndpointName"
        ]
      },
      "Description": "Name of the SageMaker endpoint"
    },
    "StateMachine": {
      "Value": {
        "Ref": "StateMachine"
      },
      "Description": "StepFunction StateMachine the runs the build"
    },
    "DataBucket": {
      "Value": {
        "Fn::GetAtt": [
          "Variables",
          "DataBucket"
        ]
      },
      "Description": "S3 Bucket to put data for training in, will automaticaly trigger a new build"
    },
    "TrainingConfigLambda": {
      "Value": {
        "Ref": "StepLambdaGetTrainingConfig"
      },
      "Description": "Lambda function that returns the Training Job Config"
    },
    "EndpointConfigLambda": {
      "Value": {
        "Ref": "StepLambdaGetEndpointConfig"
      },
      "Description": "Lambda function that returns the Endpoint Config"
    },
    "TrainingDockerfilePathLambda": {
      "Value": {
        "Ref": "StepLambdaGetTrainingDockerfilePath"
      },
      "Description": "Lambda function that returns the path of the Training Dockerfile in the code repo"
    },
    "InferenceDockerfilePathLambda": {
      "Value": {
        "Ref": "StepLambdaGetInferenceDockerfilePath"
      },
      "Description": "Lambda function that returns the path of the Inference Dockerfile in the code repo"
    },
    "RepoUrl": {
      "Value": {
        "Fn::GetAtt": [
          "Variables",
          "RepoUrl"
        ]
      },
      "Description": "CodeCommit repo to put Dockerfile code in, will automatically trigger a new build"
    },
    "StepFunctionConsole": {
      "Value": {
        "Fn::Sub": "https://console.aws.amazon.com/states/home?region=${AWS::Region}#/statemachines/view/${StateMachine}"
      },
      "Description": "AWS Console for the StepFunction StateMachine that controls the build"
    }
  },
  "Resources": {
    "ParamValidation": {
      "Type": "Custom::Variables",
      "Condition": "InvalidConfiguration",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "FailLambda",
            "Arn"
          ]
        },
        "reason": "Cannot specify both CodeCommit and Github repo"
      }
    },
    "Variables": {
      "Type": "Custom::Variables",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "VariableLambda",
            "Arn"
          ]
        },
        "EndpointName": {
          "op": "toLowerCase",
          "value": {
            "Ref": "AWS::StackName"
          }
        },
        "DataBucket": {
          "Fn::If": [
            "CreateDataBucket",
            {
              "Ref": "DataBucket"
            },
            {
              "Ref": "ExternalDataBucket"
            }
          ]
        },
        "RepoName": {
          "Fn::If": [
            "CreateRepo",
            {
              "Fn::GetAtt": [
                "CodeRepo",
                "Name"
              ]
            },
            {
              "Ref": "ExternalCodeCommitRepo"
            }
          ]
        },
        "RepoUrl": {
          "Fn::If": [
            "IsCodeCommitRepo",
            {
              "Fn::If": [
                "CreateRepo",
                {
                  "Fn::GetAtt": [
                    "CodeRepo",
                    "CloneUrlHttp"
                  ]
                },
                {
                  "Fn::Sub": "https://codecommit.us-east-1.amazonaws.com/v1/repos/${ExternalCodeCommitRepo}"
                }
              ]
            },
            {
              "Ref": "ExternalGithubRepo"
            }
          ]
        }
      }
    },
    "ClearECRLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response=require(\"cfn-response\"),aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cb=new aws.CodeBuild,s3=new aws.S3,ecr=new aws.ECR,lambda=new aws.Lambda;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),\"Delete\"===event.RequestType?ecr.batchDeleteImage({imageIds:[{imageTag:event.ResourceProperties.tag}],repositoryName:event.ResourceProperties.repo}).promise().then(()=>response.send(event,context,response.SUCCESS)).catch(x=>{console.log(x),response.send(event,context,response.SUCCESS)}):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "CodeCommitTriggerLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var cc=new aws.CodeCommit;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken,cc.getRepositoryTriggers({repositoryName:params.repositoryName}).promise().then(function(result){var triggers=result.triggers.filter(x=>x.name!==params.trigger.name);return\"Delete\"!==event.RequestType&&triggers.push(params.trigger),cc.putRepositoryTriggers({repositoryName:params.repositoryName,triggers:triggers}).promise()}).then(()=>response.send(event,context,response.SUCCESS)).catch(e=>{console.log(e),response.send(event,context,response.FAILED)})};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "FailLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "function send(event,context,responseStatus,reason,responseData,physicalResourceId){var responseBody=JSON.stringify({Status:responseStatus,Reason:reason,PhysicalResourceId:physicalResourceId||context.logStreamName,StackId:event.StackId,RequestId:event.RequestId,LogicalResourceId:event.LogicalResourceId,Data:responseData});console.log(\"Response body:\\n\",responseBody);var https=require(\"https\"),parsedUrl=require(\"url\").parse(event.ResponseURL),options={hostname:parsedUrl.hostname,port:443,path:parsedUrl.path,method:\"PUT\",headers:{\"content-type\":\"\",\"content-length\":responseBody.length}},request=https.request(options,function(response){console.log(\"Status code: \"+response.statusCode),console.log(\"Status message: \"+response.statusMessage),context.done()});request.on(\"error\",function(error){console.log(\"send(..) failed executing https.request(..): \"+error),context.done()}),request.write(responseBody),request.end()}exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),send(event,context,\"FAILED\",event.ResourceProperties.reason)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "JupyterApiProxyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION||\"us-east-1\";var sagemaker=new aws.SageMaker,https=require(\"https\"),URL=require(\"url\");function send(args){return sagemaker.createPresignedNotebookInstanceUrl({NotebookInstanceName:args.InstanceName}).promise().then(function(result){console.log(result);var url=URL.parse(result.AuthorizedUrl);return console.log(url),new Promise(function(res,rej){var opts={hostname:url.hostname,protocol:url.protocol,post:443,path:`${url.pathname}${url.search}`,method:\"GET\"};console.log(opts);var req=https.request(opts,x=>{opts.headers={Cookie:x.headers[\"set-cookie\"].join(\"; \")},opts.path=x.headers.location,res(opts)});req.on(\"error\",rej),req.end()})}).then(opts=>(console.log(opts),new Promise(function(res,rej){var req=https.request(opts,x=>{opts.path=x.headers.location,res(opts)});req.on(\"error\",rej),req.end()}))).then(opts=>(console.log(opts),new Promise(function(res,rej){var req=https.request(opts,x=>{opts.path=args.path,opts.method=args.method,res(opts)});req.on(\"error\",rej),req.end()}))).then(opts=>{var body=[];return console.log(opts),new Promise(function(res,rej){var req=https.request(opts,response=>{response.on(\"data\",chunk=>{body.push(chunk)}),response.on(\"end\",()=>{res(Buffer.concat(body).toString())})});args.body&&req.write(args.body),req.on(\"error\",rej),req.end()})}).then(x=>{try{return JSON.parse(x)}catch(e){return x}})}exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties[event.RequestType.toLowerCase()];params?(console.log(params),send(params).then(result=>{console.log(result),response.send(event,context,response.SUCCESS)}).catch(error=>{console.log(error),response.send(event,context,response.FAILED)})):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "S3ClearLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var s3=new aws.S3;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;\"Delete\"===event.RequestType?new Promise(function(res,rej){!function next(){s3.listObjectVersions({Bucket:params.Bucket,Prefix:params.Prefix}).promise().then(x=>x.Versions.concat(x.DeleteMarkers)).then(function(files){return files.map(file=>({Key:file.Key,VersionId:file.VersionId}))}).then(function(keys){if(keys.length>0)return s3.deleteObjects({Bucket:params.Bucket,Delete:{Objects:keys}}).promise().then(()=>next()).catch(rej);res()})}()}).then(()=>response.send(event,context,response.SUCCESS)).catch(e=>{console.log(e),response.send(event,context,response.FAILED)}):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "S3NotificationLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var s3=new aws.S3;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken,\"Delete\"!==event.RequestType?s3.putBucketNotificationConfiguration(params).promise().then(()=>response.send(event,context,response.SUCCESS)).catch(e=>{console.log(e),response.send(event,context,response.FAILED)}):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SageMakerClearEndpointLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var sagemaker=new aws.SageMaker;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),\"Delete\"===event.RequestType?sagemaker.deleteEndpoint({EndpointName:event.ResourceProperties.name}).promise().then(()=>response.send(event,context,response.SUCCESS)).catch(x=>{console.log(x),response.send(event,context,response.SUCCESS)}):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SageMakerClearEndpointConfigLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var lambda=new aws.Lambda,sagemaker=new aws.SageMaker;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));event.ResourceProperties;\"Delete\"===event.RequestType?sagemaker.listEndpointConfigs({NameContains:event.name,NextToken:event.NextToken}).promise().then(result=>{if(result.EndpointConfigs.length)return event.NextToken=result.NextToken,new Promise(function(res,rej){!function next(index){var item=result.EndpointConfigs[index];item?sagemaker.deleteEndpointConfig({EndpointConfigName:item.EndpointConfigName}).promise().then(x=>next(index-1)).catch(rej):res()}(0)}).then(()=>lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise());response.send(event,context,response.SUCCESS)}).catch(error=>{console.log(error),response.send(event,context,response.FAILED)}):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SageMakerClearModelLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var lambda=new aws.Lambda,sagemaker=new aws.SageMaker;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));event.ResourceProperties;\"Delete\"===event.RequestType?sagemaker.listModels({NameContains:event.name,NextToken:event.NextToken}).promise().then(result=>{if(result.Models.length)return event.NextToken=result.NextToken,new Promise(function(res,rej){!function next(index){var item=result.Models[index];item?sagemaker.deleteModel({ModelName:item.ModelName}).promise().then(x=>next(index-1)).catch(rej):res()}(0)}).then(()=>lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise());response.send(event,context,response.SUCCESS)}).catch(error=>{console.log(error),response.send(event,context,response.FAILED)}):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SageMakerNotebookInstanceLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var sagemaker=new aws.SageMaker,lambda=new aws.Lambda;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken,new Promise(function(res,rej){\"Wait\"===event.RequestType?sagemaker.describeNotebookInstance({NotebookInstanceName:params.NotebookInstanceName}).promise().then(function(result){\"InService\"===result.NotebookInstanceStatus?(response.send(event,context,response.SUCCESS),res()):\"Pending\"===result.NotebookInstanceStatus?setTimeout(()=>{lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise().then(res)},2e3):rej(result)}):\"Create\"===event.RequestType?sagemaker.createNotebookInstance(params).promise().then(()=>{event.RequestType=\"Wait\",setTimeout(()=>{lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise().then(res)},2e3)}).catch(rej):\"Update\"===event.RequestType?sagemaker.updateNotebookInstance({NotebookInstanceName:params.NotebookInstanceName,InstanceType:params.InstanceType,RoleArn:params.RoleArn}).promise().then(()=>{event.RequestType,setTimeout(()=>{lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise().then(res)},2e3)}).catch(rej):sagemaker.describeNotebookInstance({NotebookInstanceName:params.NotebookInstanceName}).promise().then(function(result){return\"InService\"===result.NotebookInstanceStatus?sagemaker.stopNotebookInstance({NotebookInstanceName:params.NotebookInstanceName}).promise().then(()=>new Promise(function(res,rej){setTimeout(()=>{lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise().then(res)},2e3)})).catch(rej):\"Stopped\"===result.NotebookInstanceStatus?sagemaker.deleteNotebookInstance({NotebookInstanceName:params.NotebookInstanceName}).promise().then(()=>response.send(event,context,response.SUCCESS)).catch(rej):void(\"Stopping\"===result.NotebookInstanceStatus?setTimeout(()=>{lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise().then(()=>{res()})},2e3):rej(result))})}).then(()=>callback(null)).catch(x=>{console.log(x),response.send(event,context,response.FAILED),callback(null)})};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "VariableLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response=require(\"cfn-response\");exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken,Object.keys(params).forEach(function(key){var value=params[key];\"object\"==typeof value&&(\"toLowerCase\"===value.op?params[key]=value.value.toLowerCase():params[key]=value.value)}),response.send(event,context,response.SUCCESS,params)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "CFNLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess",
          "arn:aws:iam::aws:policy/AWSCodeCommitFullAccess",
          "arn:aws:iam::aws:policy/AWSLambdaFullAccess"
        ]
      }
    },
    "CFNLambdaPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Roles": [
          {
            "Ref": "CFNLambdaRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::${ArtifactBucket}*"
                },
                {
                  "Fn::Sub": "arn:aws:s3:::${Variables.DataBucket}*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ecr:*"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "StepLambdaBuildStatus": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar codebuild=new aws.CodeBuild()\n\nexports.handler=(event,context,cb)=>{\n    console.log(JSON.stringify(event,null,2))\n    codebuild.batchGetBuilds({\n        ids:[event.id] \n    }).promise()\n    .then(result=>cb(null,result.builds[0]))\n    .catch(x=>{\n        console.log(x)\n        cb(x)\n    })\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "StepLambdaCreateEndpointConfig": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    \n    var args=Object.assign({\n        EndpointConfigName:event.name\n    },event.params.endpoint.args) \n\n    sagemaker.createEndpointConfig(args).promise()\n    .then(result=>{\n        event.params.endpoint.arn=result.EndpointConfigArn\n        cb(null,event.endpoint)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "StepLambdaCreateModel": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    event.model.name=event.name\n    sagemaker.createModel({\n        ExecutionRoleArn:event.model.role,\n        ModelName:event.model.name,\n        PrimaryContainer:{\n            Image:event.images.inference,\n            ModelDataUrl:event.params.training.args.ModelArtifacts.S3ModelArtifacts\n        },\n        Tags:[{\n            Key:\"BuildStack\",\n            Value:event.StackName\n        }]\n    }).promise()\n    .then(result=>{\n        event.model.arn=result.ModelArn\n        return sagemaker.listModels({\n            NameContains:event.Stackname,\n            SortBy:\"CreationTime\",\n            SortOrder:\"Descending\",\n            MaxResults:10\n        }).promise()\n    })\n    .then(result=>{\n        event.model.old=result.Models.map(x=>x.ModelName)\n        cb(null,event.model)\n    })\n    .catch(cb)\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "StepLambdaEndpointStatus": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    \n    \n    sagemaker.describeEndpoint({\n        EndpointName:event.endpoint.name\n    }).promise()\n    .then(result=>{\n        Object.assign(event.endpoint,result)\n        cb(null,event)\n    })\n    .catch(cb)\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "StepLambdaGetEndpointConfig": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import json\n\ndef handler(event,context):\n    print(json.dumps(event,indent=2))\n    return {\n      \"ProductionVariants\": [{\n          \"InitialInstanceCount\": 1, \n          \"InstanceType\": \"ml.t2.medium\",\n          \"ModelName\":event[\"model\"][\"name\"], \n          \"VariantName\":\"prod\", \n        }]\n    } \n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 60
      }
    },
    "StepLambdaGetInferenceDockerfilePath": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import json\n\ndef handler(event,context):\n    print(json.dumps(event,indent=2))\n    return \"example/inference\"\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 60
      }
    },
    "StepLambdaGetTrainingConfig": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import json\n\ndef handler(event,context):\n    print(json.dumps(event,indent=2))\n    return {\n      \"AlgorithmSpecification\": { \n        \"TrainingImage\":event[\"images\"][\"train\"], \n        \"TrainingInputMode\": \"File\"\n      },\n      \"InputDataConfig\": [ \n        {\n          \"ChannelName\": \"training\", \n          \"DataSource\": { \n            \"S3DataSource\": { \n              \"S3DataType\": \"S3Prefix\", \n              \"S3Uri\":f\"s3://{event['Buckets']['Data']}/train/\", \n              \"S3DataDistributionType\": \"FullyReplicated\" \n            }\n          },\n          \"CompressionType\": \"None\",\n          \"RecordWrapperType\": \"None\" \n        },\n      ],\n      \"OutputDataConfig\": { \n        'S3OutputPath':f\"s3://{event['Buckets']['Artifact']}\", \n      },\n      \"ResourceConfig\": { \n        \"InstanceCount\": 1, \n        \"InstanceType\": \"ml.m4.xlarge\" , \n        \"VolumeSizeInGB\": 1, \n      },\n      \"RoleArn\":event[\"params\"][\"training\"][\"role\"], \n      \"StoppingCondition\": { \n        \"MaxRuntimeInSeconds\": 600\n      },\n      \"TrainingJobName\":event[\"name\"], \n      \"HyperParameters\": {},\n      \"Tags\": []\n    }\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 60
      }
    },
    "StepLambdaGetTrainingDockerfilePath": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import json\n\ndef handler(event,context):\n    print(json.dumps(event,indent=2))\n    return \"example/train\"\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 60
      }
    },
    "StepLambdaNotificationFail": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sns=new aws.SNS()\nvar result=\"Failed\"\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n  \n    sns.publish({\n        TopicArn:event.SNSTopic,\n        Subject:`SageBuild ${result}`,\n        Message:`Training ${result}. \n            StackName:${event.StackName} \n            Name:${event.name}\n            Date:${new Date()}\n        `,\n        MessageAttributes:{\n            event:{\n                DataType:\"String\",\n                StringValue:JSON.stringify(event)\n            }\n        }\n    }).promise()\n    .then(result=>{\n        cb(null,{})\n    })\n    .catch(cb)\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "StepLambdaNotificationSuccess": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sns=new aws.SNS()\nvar result=\"Success\"\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n  \n    sns.publish({\n        TopicArn:event.SNSTopic,\n        Subject:`SageBuild ${result}`,\n        Message:`Training ${result}. \n            StackName:${event.StackName} \n            Name:${event.name}\n            Date:${new Date()}\n        `,\n        MessageAttributes:{\n            event:{\n                DataType:\"String\",\n                StringValue:JSON.stringify(event)\n            }\n        }\n    }).promise()\n    .then(result=>{\n        cb(null,{})\n    })\n    .catch(cb)\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "StepLambdaSetTime": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    var date=new Date()\n\n    event.timestamp=`${date.getFullYear().toString()}-${date.getMonth()+1}-${date.getDate()}-${date.getHours()}-${date.getMinutes()}-${date.getSeconds()}-${datae.getMilliseconds}`\n\n    event.name=`${event.StackName}-${event.timestamp}`\n    cb(null,event)\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "StepLambdaStartBuild": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar codebuild=new aws.CodeBuild()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    codebuild.startBuild({\n        projectName:event.projectName,\n        environmentVariablesOverride:[{\n            name:\"IMAGE_TAG\",\n            value:event.tag\n        },{\n            name:\"DOCKERFILE_PATH\",\n            value:event.dockerfile_path\n        }]\n    }).promise()\n    .then(result=>cb(null,result.build))\n    .catch(cb)\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "StepLambdaStartTraining": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    event.Tags=event.Tags || []\n    event.Tags.push({\n        Key:\"BuildStack\",\n        Value:event.StackName\n    })\n    \n    sagemaker.createTrainingJob(event.params.training.args).promise()\n    .then(result=>cb(null,result.TrainingJobArn))\n    .catch(cb)\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "StepLambdaTrainingStatus": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    \n    \n    sagemaker.describeTrainingJob({\n        TrainingJobName:event.params.training.args.TrainingJobName\n    }).promise()\n    .then(result=>{\n        Object.assign(event.params.training.args,result)\n        cb(null,event)\n    })\n    .catch(cb)\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "StepLambdaUpdateEndpoint": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\nvar crypto=require('crypto')\nvar hash=crypto.randomBytes(8).toString('base64').replace('=','')\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    \n    return sagemaker.describeEndpoint({\n        EndpointName:event.StackName\n    }).promise()\n    .then(()=>true)\n    .catch(error=>{\n        if(error.message.match(/Could not find/)){\n            return false\n        }else{\n            throw error\n        }\n    })\n    .then(function(exists){\n        if(exists){\n            return sagemaker.updateEndpoint({\n                EndpointConfigName:event.name,\n                EndpointName:event.StackName\n            }).promise()\n        }else{\n            return sagemaker.createEndpoint({\n                EndpointConfigName:event.name,\n                EndpointName:event.StackName\n            }).promise()\n        }\n    })\n    .then(result=>{\n        event.endpoint.name=event.StackName\n        cb(null,event)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "StepLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess",
          "arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess",
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
        ]
      }
    },
    "LaunchTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": {
          "Fn::Sub": "${AWS::StackName}-launch"
        },
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "LaunchLambda",
                "Arn"
              ]
            },
            "Protocol": "lambda"
          }
        ]
      }
    },
    "LaunchLambdaSNSPolicy": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LaunchLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "LaunchTopic"
        }
      }
    },
    "ExternalLaunchLambdaSNSPolicy": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "SubscribeToExternalTopic",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LaunchLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "ExternalLaunchTopic"
        }
      }
    },
    "ExternalLaunchLambdaSubscription": {
      "Type": "AWS::SNS::Subscription",
      "Condition": "SubscribeToExternalTopic",
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "LaunchLambda",
            "Arn"
          ]
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "ExternalLaunchTopic"
        }
      }
    },
    "LaunchTopicPolicy": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "MyTopicPolicy",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "S3Access",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": "sns:Publish",
              "Resource": {
                "Ref": "LaunchTopic"
              },
              "Condition": {
                "ArnLike": {
                  "AWS:SourceArn": {
                    "Fn::Sub": "arn:aws:s3:::${Variables.DataBucket}"
                  }
                }
              }
            },
            {
              "Sid": "CodeCommit",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": "sns:Publish",
              "Resource": {
                "Ref": "LaunchTopic"
              },
              "Condition": {
                "ArnLike": {
                  "AWS:SourceArn": {
                    "Fn::GetAtt": [
                      "CodeRepo",
                      "Arn"
                    ]
                  }
                }
              }
            }
          ]
        },
        "Topics": [
          {
            "Ref": "LaunchTopic"
          }
        ]
      }
    },
    "DataBucketSNS": {
      "Type": "Custom::S3Notification",
      "DependsOn": [
        "CFNLambdaPolicy",
        "LaunchTopicPolicy"
      ],
      "Condition": "CreateDataBucket",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "S3NotificationLambda",
            "Arn"
          ]
        },
        "Bucket": {
          "Fn::GetAtt": [
            "Variables",
            "DataBucket"
          ]
        },
        "NotificationConfiguration": {
          "TopicConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "TopicArn": {
                "Ref": "LaunchTopic"
              }
            }
          ]
        }
      }
    },
    "LaunchLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar stepfunctions=new aws.StepFunctions()\n\nexports.handler=function(event,context,callback){\n    console.log('Request:',JSON.stringify(event,null,2))\n    stepfunctions.listExecutions({\n        stateMachineArn:process.env.STATE_MACHINE,\n        statusFilter:\"RUNNING\" \n    }).promise()\n    .then(result=>{\n        if(result.executions.length===0){\n            return stepfunctions.startExecution({\n                stateMachineArn:process.env.STATE_MACHINE,\n                name:`SNS-${event.Records[0].Sns.MessageId}`\n            }).promise()\n        }\n    })\n    .then(()=>callback(null))\n}\n"
        },
        "Environment": {
          "Variables": {
            "STATE_MACHINE": {
              "Ref": "StateMachine"
            }
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "LaunchLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "LaunchLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
        ]
      }
    },
    "ModelClear": {
      "Type": "Custom::SageMakerModelClear",
      "DependsOn": [
        "CFNLambdaPolicy",
        "EndpointConfigClear"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SageMakerClearModelLambda",
            "Arn"
          ]
        },
        "name": {
          "Fn::Sub": "${AWS::StackName}-"
        }
      }
    },
    "EndpointConfigClear": {
      "Type": "Custom::SageMakerEndpointConfigClear",
      "DependsOn": [
        "CFNLambdaPolicy",
        "EndpointClear"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SageMakerClearEndpointConfigLambda",
            "Arn"
          ]
        },
        "name": {
          "Fn::Sub": "${AWS::StackName}-"
        }
      }
    },
    "EndpointClear": {
      "Type": "Custom::SageMakerEndpointClear",
      "DependsOn": [
        "CFNLambdaPolicy"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SageMakerClearEndpointLambda",
            "Arn"
          ]
        },
        "name": {
          "Fn::GetAtt": [
            "Variables",
            "EndpointName"
          ]
        }
      }
    },
    "TrainStatusTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": {
          "Fn::Sub": "${AWS::StackName}-train-status"
        }
      }
    },
    "ArtifactBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "ArtifactClear": {
      "Type": "Custom::S3Clear",
      "DependsOn": [
        "CFNLambdaPolicy"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "S3ClearLambda",
            "Arn"
          ]
        },
        "Bucket": {
          "Ref": "ArtifactBucket"
        }
      }
    },
    "DataBucket": {
      "Type": "AWS::S3::Bucket",
      "Condition": "CreateDataBucket",
      "Properties": {}
    },
    "DataClear": {
      "Type": "Custom::S3Clear",
      "Condition": "CreateDataBucket",
      "DependsOn": [
        "CFNLambdaPolicy"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "S3ClearLambda",
            "Arn"
          ]
        },
        "Bucket": {
          "Ref": "DataBucket"
        }
      }
    },
    "StateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Sub": "{\"Comment\":\"\",\"StartAt\":\"start\",\"States\":{\"start\":{\"Type\":\"Pass\",\"Next\":\"buildImages\"},\"buildImages\":{\"Type\":\"Parallel\",\"Branches\":[{\"StartAt\":\"startBuildImageTraining\",\"States\":{\"startBuildImageTraining\":{\"Type\":\"Pass\",\"Result\":{\"projectName\":\"${ImageBuild}\",\"SNSTopic\":\"${TrainStatusTopic}\",\"tag\":\"Training\"},\"Next\":\"buildImagePathTraining\"},\"buildImagePathTraining\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaGetTrainingDockerfilePath.Arn}\",\"ResultPath\":\"$.dockerfile_path\",\"Next\":\"buildImageTraining\"},\"buildImageTraining\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaStartBuild.Arn}\",\"ResultPath\":\"$.build.Training\",\"Next\":\"waitTraining\"},\"waitTraining\":{\"Type\":\"Wait\",\"Seconds\":5,\"Next\":\"buildStatusTraining\"},\"buildStatusTraining\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaBuildStatus.Arn}\",\"InputPath\":\"$.build.Training\",\"ResultPath\":\"$.build.Training\",\"Next\":\"checkImageTraining\"},\"checkImageTraining\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.build.Training.buildStatus\",\"StringEquals\":\"IN_PROGRESS\",\"Next\":\"waitTraining\"},{\"Variable\":\"$.build.Training.buildStatus\",\"StringEquals\":\"SUCCEEDED\",\"Next\":\"EndBuildTraining\"}],\"Default\":\"FailBuildNotificationTraining\"},\"EndBuildTraining\":{\"Type\":\"Pass\",\"End\":true},\"FailBuildNotificationTraining\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaNotificationFail.Arn}\",\"Next\":\"FailBuildTraining\"},\"FailBuildTraining\":{\"Type\":\"Fail\"}}},{\"StartAt\":\"startBuildImageInference\",\"States\":{\"startBuildImageInference\":{\"Type\":\"Pass\",\"Result\":{\"projectName\":\"${ImageBuild}\",\"SNSTopic\":\"${TrainStatusTopic}\",\"tag\":\"Inference\"},\"Next\":\"buildImagePathInference\"},\"buildImagePathInference\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaGetInferenceDockerfilePath.Arn}\",\"ResultPath\":\"$.dockerfile_path\",\"Next\":\"buildImageInference\"},\"buildImageInference\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaStartBuild.Arn}\",\"ResultPath\":\"$.build.Inference\",\"Next\":\"waitInference\"},\"waitInference\":{\"Type\":\"Wait\",\"Seconds\":5,\"Next\":\"buildStatusInference\"},\"buildStatusInference\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaBuildStatus.Arn}\",\"InputPath\":\"$.build.Inference\",\"ResultPath\":\"$.build.Inference\",\"Next\":\"checkImageInference\"},\"checkImageInference\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.build.Inference.buildStatus\",\"StringEquals\":\"IN_PROGRESS\",\"Next\":\"waitInference\"},{\"Variable\":\"$.build.Inference.buildStatus\",\"StringEquals\":\"SUCCEEDED\",\"Next\":\"EndBuildInference\"}],\"Default\":\"FailBuildNotificationInference\"},\"EndBuildInference\":{\"Type\":\"Pass\",\"End\":true},\"FailBuildNotificationInference\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaNotificationFail.Arn}\",\"Next\":\"FailBuildInference\"},\"FailBuildInference\":{\"Type\":\"Fail\"}}}],\"Next\":\"setUpTrain\"},\"setUpTrain\":{\"Type\":\"Pass\",\"Result\":{\"StackName\":\"${Variables.EndpointName}\",\"SNSTopic\":\"${TrainStatusTopic}\",\"model\":{\"role\":\"${ModelRole.Arn}\"},\"Buckets\":{\"Artifact\":\"${ArtifactBucket}\",\"Data\":\"${Variables.DataBucket}\"},\"endpoint\":{},\"params\":{\"training\":{\"role\":\"${TrainingRole.Arn}\"},\"endpoint\":{}},\"images\":{\"train\":\"${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepo}:Training\",\"inference\":\"${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepo}:Inference\"}},\"Next\":\"setTime\"},\"setTime\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaSetTime.Arn}\",\"ResultPath\":\"$\",\"Next\":\"getTrainingConfig\"},\"getTrainingConfig\":{\"Type\":\"Task\",\"InputPath\":\"$\",\"Resource\":\"${StepLambdaGetTrainingConfig.Arn}\",\"ResultPath\":\"$.params.training.args\",\"Next\":\"startTraining\"},\"startTraining\":{\"Type\":\"Task\",\"InputPath\":\"$\",\"Resource\":\"${StepLambdaStartTraining.Arn}\",\"ResultPath\":\"$.params.training.Arn\",\"Next\":\"waitForTraining\"},\"waitForTraining\":{\"Type\":\"Wait\",\"Seconds\":30,\"Next\":\"getTrainingStatus\"},\"getTrainingStatus\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaTrainingStatus.Arn}\",\"ResultPath\":\"$\",\"Next\":\"checkTrainingStatus\"},\"checkTrainingStatus\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.params.training.args.TrainingJobStatus\",\"StringEquals\":\"InProgress\",\"Next\":\"waitForTraining\"},{\"Variable\":\"$.params.training.args.TrainingJobStatus\",\"StringEquals\":\"Completed\",\"Next\":\"createModel\"}],\"Default\":\"trainingFail\"},\"trainingFail\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaNotificationFail.Arn}\",\"Next\":\"Fail\"},\"createModel\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaCreateModel.Arn}\",\"ResultPath\":\"$.model\",\"Next\":\"getEndpointConfig\"},\"getEndpointConfig\":{\"Type\":\"Task\",\"InputPath\":\"$\",\"Resource\":\"${StepLambdaGetEndpointConfig.Arn}\",\"ResultPath\":\"$.params.endpoint.args\",\"Next\":\"createEndpointConfig\"},\"createEndpointConfig\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaCreateEndpointConfig.Arn}\",\"ResultPath\":\"$.endpoint\",\"Next\":\"updateEndpoint\"},\"updateEndpoint\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaUpdateEndpoint.Arn}\",\"Next\":\"waitForEndpoint\"},\"waitForEndpoint\":{\"Type\":\"Wait\",\"Seconds\":10,\"Next\":\"endpointStatus\"},\"endpointStatus\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaEndpointStatus.Arn}\",\"Next\":\"endpointCheck\"},\"endpointCheck\":{\"Type\":\"Choice\",\"Choices\":[{\"Or\":[{\"Variable\":\"$.endpoint.EndpointStatus\",\"StringEquals\":\"Creating\"},{\"Variable\":\"$.endpoint.EndpointStatus\",\"StringEquals\":\"Updating\"}],\"Next\":\"waitForEndpoint\"},{\"Variable\":\"$.endpoint.EndpointStatus\",\"StringEquals\":\"InService\",\"Next\":\"Success\"}],\"Default\":\"endpointFail\"},\"endpointFail\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaNotificationFail.Arn}\",\"Next\":\"Fail\"},\"Success\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaNotificationSuccess.Arn}\",\"End\":true},\"Fail\":{\"Type\":\"Fail\"}}}"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "StepFunctionRole",
            "Arn"
          ]
        }
      }
    },
    "ModelRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sagemaker.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        ],
        "Policies": [
          {
            "PolicyName": "Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:CreateLogGroup",
                    "logs:DescribeLogStreams",
                    "ecr:GetAuthorizationToken"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${Variables.DataBucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${ArtifactBucket}/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ECRRepo}"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "TrainingRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sagemaker.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sagemaker:*",
                    "ecr:GetAuthorizationToken",
                    "cloudwatch:PutMetricData",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": "*",
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": "sagemaker.amazonaws.com"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${Variables.DataBucket}"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${Variables.DataBucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${ArtifactBucket}/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ECRRepo}"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "StepFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "states.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "CloudWatchLogsPolicy",
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CodeRepo": {
      "Type": "AWS::CodeCommit::Repository",
      "Condition": "CreateRepo",
      "Properties": {
        "RepositoryName": {
          "Ref": "AWS::StackName"
        }
      }
    },
    "CodeTrigger": {
      "Type": "Custom::CodeCommitTrigger",
      "DependsOn": [
        "CFNLambdaPolicy"
      ],
      "Condition": "CreateRepoTrigger",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CodeCommitTriggerLambda",
            "Arn"
          ]
        },
        "repositoryName": {
          "Fn::GetAtt": [
            "Variables",
            "RepoName"
          ]
        },
        "trigger": {
          "branches": {
            "Ref": "BranchBuildTrigger"
          },
          "destinationArn": {
            "Ref": "LaunchTopic"
          },
          "events": [
            "all"
          ],
          "name": {
            "Ref": "AWS::StackName"
          }
        }
      }
    },
    "ECRRepo": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryPolicyText": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              },
              "Action": [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability"
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sagemaker.amazonaws.com"
              },
              "Action": [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage"
              ]
            }
          ]
        }
      }
    },
    "ImageBuild": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Artifacts": {
          "Type": "NO_ARTIFACTS"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [
            {
              "Name": "IMAGE_REPO_NAME",
              "Value": {
                "Ref": "ECRRepo"
              }
            },
            {
              "Name": "AWS_DEFAULT_REGION",
              "Value": {
                "Ref": "AWS::Region"
              }
            },
            {
              "Name": "AWS_ACCOUNT_ID",
              "Value": {
                "Ref": "AWS::AccountId"
              }
            },
            {
              "Name": "STACK_NAME",
              "Value": {
                "Ref": "AWS::StackName"
              }
            }
          ],
          "Image": "aws/codebuild/docker:17.09.0",
          "PrivilegedMode": true,
          "Type": "LINUX_CONTAINER"
        },
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Image-build"
        },
        "ServiceRole": {
          "Ref": "ServiceRole"
        },
        "Source": {
          "Type": {
            "Fn::If": [
              "IsCodeCommitRepo",
              "CODECOMMIT",
              "GITHUB"
            ]
          },
          "Location": {
            "Fn::GetAtt": [
              "Variables",
              "RepoUrl"
            ]
          },
          "BuildSpec": "version: 0.2\n\nphases:\n  pre_build:\n    commands:\n      - echo Logging in to Amazon ECR...\n      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)\n  build:\n    commands:\n      - echo Build started on `date`\n      - echo \"Building the Training Docker image...\"\n      - cd $CODEBUILD_SRC_DIR/$DOCKERFILE_PATH \n      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .\n      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG      \n      - echo \"Pushing the Docker image...\"\n      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG\n  post_build:\n    commands:\n      - echo Build completed on `date`\n\n\n\n\n",
          "Auth": {
            "Fn::If": [
              "IsCodeCommitRepo",
              {
                "Ref": "AWS::NoValue"
              },
              {
                "Type": "OAUTH"
              }
            ]
          }
        }
      }
    },
    "ClearTrainingImage": {
      "Type": "Custom::ClearImage",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ClearECRLambda",
            "Arn"
          ]
        },
        "repo": {
          "Ref": "ECRRepo"
        },
        "tag": "Training"
      }
    },
    "ClearInferanceImage": {
      "Type": "Custom::ClearImage",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ClearECRLambda",
            "Arn"
          ]
        },
        "repo": {
          "Ref": "ECRRepo"
        },
        "tag": "Inference"
      }
    },
    "ServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonECS_FullAccess",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        ],
        "Policies": [
          {
            "PolicyName": "codebuild",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "CloudWatchLogsPolicy",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Sid": "CodeCommitPolicy",
                  "Effect": "Allow",
                  "Action": [
                    "codecommit:GitPull",
                    "ecr:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Sid": "S3GetObjectPolicy",
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:GetObjectVersion"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Sid": "S3PutObjectPolicy",
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "dashboard": {
      "Type": "AWS::CloudWatch::Dashboard",
      "Properties": {
        "DashboardName": {
          "Ref": "AWS::StackName"
        },
        "DashboardBody": {
          "Fn::Sub": "{\"widgets\":[{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":0,\"properties\":{\"markdown\":\"# ${AWS::StackName} Dashboard\"}},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":9,\"properties\":{\"markdown\":\"## SageMaker Endpoint\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"/aws/sagemaker/Endpoints\",\"CPUUtilization\",\"EndpointName\",\"${AWS::StackName}\",\"VariantName\",\"prod\",{\"yAxis\":\"right\"}],[\".\",\"MemoryUtilization\",\".\",\".\",\".\",\".\"]],\"region\":\"${AWS::Region}\"},\"height\":6,\"width\":6,\"x\":0,\"y\":11},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":24,\"properties\":{\"markdown\":\"## Step Function StateMachine\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/States\",\"ExecutionTime\",\"StateMachineArn\",\"${StateMachine}\"]],\"region\":\"${AWS::Region}\"},\"height\":6,\"width\":6,\"x\":0,\"y\":26},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":true,\"metrics\":[[\"AWS/States\",\"ExecutionThrottled\",\"StateMachineArn\",\"${StateMachine}\",{\"stat\":\"Sum\"}],[\".\",\"ExecutionsAborted\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"ExecutionsFailed\",\".\",\".\",{\"color\":\"#d62728\",\"stat\":\"Sum\"}],[\".\",\"ExecutionsSucceeded\",\".\",\".\",{\"color\":\"#2ca02c\",\"stat\":\"Sum\"}],[\".\",\"ExecutionsTimedOut\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\"},\"height\":6,\"width\":6,\"x\":6,\"y\":26},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":39,\"properties\":{\"markdown\":\"## Step Function Lambdas \"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaBuildStatus}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaBuildStatus\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":41},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaCreateEndpointConfig}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaCreateEndpointConfig\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":41},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaCreateModel}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaCreateModel\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":41},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaEndpointStatus}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaEndpointStatus\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":41},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaGetEndpointConfig}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaGetEndpointConfig\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":47},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaGetInferenceDockerfilePath}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaGetInferenceDockerfilePath\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":47},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaGetTrainingConfig}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaGetTrainingConfig\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":47},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaGetTrainingDockerfilePath}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaGetTrainingDockerfilePath\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":47},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaNotificationFail}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaNotificationFail\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":53},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaNotificationSuccess}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaNotificationSuccess\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":53},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaSetTime}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaSetTime\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":53},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaStartBuild}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaStartBuild\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":53},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaStartTraining}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaStartTraining\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":59},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaTrainingStatus}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaTrainingStatus\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":59},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaUpdateEndpoint}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaUpdateEndpoint\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":59},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LaunchLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LaunchLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":59}]}"
        }
      }
    },
    "SageBuildNotebookDirectory": {
      "Type": "Custom::SageMakerNotebook",
      "Condition": "LaunchNoteBookInstance",
      "DependsOn": [
        "CFNLambdaPolicy",
        "SageMakerNotebookInstance"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "JupyterApiProxyLambda",
            "Arn"
          ]
        },
        "create": {
          "InstanceName": {
            "Ref": "AWS::StackName"
          },
          "path": "/api/contents/SageBuild",
          "method": "PUT",
          "body": "{\"name\":\"SageBuild\",\"type\":\"directory\"}"
        }
      }
    },
    "SageBuildNotebookTutorial": {
      "Type": "Custom::SageMakerNotebook",
      "Condition": "LaunchNoteBookInstance",
      "DependsOn": [
        "CFNLambdaPolicy",
        "SageBuildNotebookDirectory",
        "SageMakerNotebookInstance"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "JupyterApiProxyLambda",
            "Arn"
          ]
        },
        "create": {
          "InstanceName": {
            "Ref": "AWS::StackName"
          },
          "path": "/api/contents/SageBuild/tutorial.ipynb",
          "method": "PUT",
          "body": {
            "Fn::Sub": "{\"name\":\"tutorial.ipynb\",\"type\":\"notebook\",\"content\":{\"cells\":[{\"cell_type\":\"markdown\",\"metadata\":{},\"source\":[\"# SageBuild Tutorial\\n\",\"\\n\",\"This notebook will walk you through on how to use Sagebuild to build and deploy custom models on-demand or in response to events. We will reuse the code from the \\\"scikit_bring_your_own\\\" example notebook.\\n\",\"\\n\",\"## Helpfull Links\\n\",\"* [Blog Post]() to see the details of how SageBuild works. \\n\",\"* [See here](/notebooks/sample-notebooks/advanced_functionality/scikit_bring_your_own/scikit_bring_your_own.ipynb) for details of how to write Dockerfiles for your own algorithms.\\n\",\"\\n\",\"## Table of Contents\\n\",\"1. [Setup](#SetUp)\\n\",\"2. [Deploy](#Deploy)\\n\",\"3. [Wait](#Wait)\\n\",\"4. [Use](#Use)\\n\",\"5. [Conclusion](#Conclusion)\"]},{\"cell_type\":\"markdown\",\"metadata\":{},\"source\":[\"## SetUp <a name=\\\"SetUp\\\"></a>\\n\",\"The following sets up the packages and variables we need. Note, the region and StackName variables have been filled in for you by the cloudformation template.\"]},{\"cell_type\":\"code\",\"execution_count\":null,\"metadata\":{},\"outputs\":[],\"source\":[\"import boto3\\n\",\"import json\\n\",\"from subprocess import check_output as run\\n\",\"from subprocess import STDOUT\\n\",\"from time import sleep\\n\",\"import numpy as np\\n\",\"import pandas as pd\\n\",\"from io import StringIO\\n\",\"\\n\",\"cf = boto3.client('cloudformation')\\n\",\"sns = boto3.client('sns')\\n\",\"step = boto3.client('stepfunctions')\\n\",\"s3 = boto3.resource('s3')\\n\",\"ssm = boto3.client('ssm')\\n\",\"sagemaker = boto3.client('sagemaker-runtime')\\n\",\"Lambda=boto3.client('lambda')\\n\",\"\\n\",\"region='${AWS::Region}'\\n\",\"StackName='${AWS::StackName}'\\n\",\"data='../sample-notebooks/advanced_functionality/scikit_bring_your_own/data/iris.csv'\\n\",\"\\n\",\"#Get outputs from build stack\\n\",\"result=cf.describe_stacks(\\n\",\"    StackName=StackName\\n\",\")\\n\",\"#Put Outputs in a dict for easy use\\n\",\"outputs={}\\n\",\"for output in result['Stacks'][0]['Outputs']:\\n\",\"    outputs[output['OutputKey']]=output['OutputValue']\\n\",\"print(\\\"Stack Outputs\\\")\\n\",\"print(json.dumps(outputs,indent=4))\"]},{\"cell_type\":\"markdown\",\"metadata\":{},\"source\":[\"The follow shell commands will configure git to be able to access AWS CodeCommit and clone down the example repo. \"]},{\"cell_type\":\"code\",\"execution_count\":null,\"metadata\":{},\"outputs\":[],\"source\":[\"#configure git to be able to access CodeCommit,uses SageMaker Instance's role for permissions.\\n\",\"!git config --global credential.helper '!aws codecommit credential-helper $@'\\n\",\"!git config --global credential.UseHttpPath true\\n\",\"\\n\",\"#clone down our example code\\n\",\"!git clone https://github.com/aws-samples/aws-sagemaker-build.git\\n\"]},{\"cell_type\":\"markdown\",\"metadata\":{},\"source\":[\"## configuration\\n\",\"\\n\",\"Both the training-job and endpoint have various configuration parameters. The build generates those parameters by calling two lambda functions with the current build state. The CloudFormation template initializes these lambdas with responable defaults but if you want to edit these, use different instances types, add more data channels, or use hyper parameters then you will need to change/update the function code.\\n\",\"\\n\",\"- The Dockfile path lambdas output the path to the directory containing the Dockerfile for the images in the code repository\\n\",\"\\n\",\"- The training lambda must output an object that matchs the input params for the create training job function in AWS js sdk. see [here](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SageMaker.html#createTrainingJob-property)\\n\",\"\\n\",\"- The endpoint lambda must output an object that matchs the input params for the create endpoint config function in AWS js sdk. see [here](createEndpointConfig)\\n\",\"\\n\",\"\\n\",\"\\n\",\"you can look at the code in the lambda functions in the console to get an idea of were to start.\\n\"]},{\"cell_type\":\"code\",\"execution_count\":null,\"metadata\":{},\"outputs\":[],\"source\":[\"import zipfile\\n\",\"import io\\n\",\"#creates a lambda deployment zip of python script\\n\",\"def getZip(name):\\n\",\"    buffer=io.BytesIO()\\n\",\"    with zipfile.ZipFile(buffer, mode='w') as zf:\\n\",\"        zf.write(f\\\"./aws-sagemaker-build/example/config/{name}.py\\\",arcname=\\\"index.py\\\") \\n\",\"    return buffer.getvalue()\\n\",\"\\n\",\"#creates a lambda deployment zip of a string\\n\",\"def zipString(text):\\n\",\"    buffer=io.BytesIO()\\n\",\"    info = zipfile.ZipInfo(\\\"index.py\\\")\\n\",\"    info.external_attr=0o777 << 16 \\n\",\"    with zipfile.ZipFile(buffer, mode='w') as zf:\\n\",\"        zf.writestr(info,text) \\n\",\"    return buffer.getvalue()\\n\",\"\\n\",\"#Update lambda with code in a string\\n\",\"Lambda.update_function_code(\\n\",\"    FunctionName=outputs['TrainingDockerfilePathLambda'],\\n\",\"    ZipFile=zipString(\\\"\\\"\\\"\\n\",\"def handler(event,context):\\n\",\"    return \\\"docker-images/train\\\"    \\n\",\"\\\"\\\"\\\")\\n\",\");\\n\",\"print(\\\"Training Dockerfile path Lambda Updated\\\")\\n\",\"\\n\",\"Lambda.update_function_code(\\n\",\"    FunctionName=outputs['InferenceDockerfilePathLambda'],\\n\",\"    ZipFile=zipString(\\\"\\\"\\\"\\n\",\"def handler(event,context):\\n\",\"    return \\\"docker-images/inference\\\"    \\n\",\"\\\"\\\"\\\")\\n\",\");\\n\",\"print(\\\"Inference Dockerfile path Lambda Updated\\\")\\n\",\"\\n\",\"#Update lambda with code in a file\\n\",\"Lambda.update_function_code(\\n\",\"    FunctionName=outputs['TrainingConfigLambda'],\\n\",\"    ZipFile=getZip(\\\"training\\\")\\n\",\");\\n\",\"print(\\\"Training Config Lambda Updated\\\")\\n\",\"\\n\",\"Lambda.update_function_code(\\n\",\"    FunctionName=outputs['EndpointConfigLambda'],\\n\",\"    ZipFile=getZip(\\\"endpoint\\\")\\n\",\");\\n\",\"print(\\\"Endpoint Config Lambda Updated\\\")\"]},{\"cell_type\":\"markdown\",\"metadata\":{},\"source\":[\"## Deploy! <a name=\\\"Deploy\\\"></a>\\n\",\"The following will \\n\",\"- add the CodeCommit repo created by the cloudformation template as a remote named deploy\\n\",\"- push example code to repo (will trigger a build)\\n\",\"- upload our data to the DataBucket created by the Cloudformation template (will trigger a build)\\n\",\"\\n\",\"Once a build has started no new build can be started till the first one finishes\"]},{\"cell_type\":\"code\",\"execution_count\":null,\"metadata\":{},\"outputs\":[],\"source\":[\"#push our Dockerfile code to the \\\"deploy\\\" CodeCommit repo\\n\",\"run(\\\"cd aws-sagemaker-build && git remote add deploy {0}; git push deploy master\\\".format(outputs['RepoUrl']),\\n\",\"    stderr=STDOUT,\\n\",\"    shell=True) \\n\",\"print(\\\"code Pushed\\\")\\n\",\"\\n\",\"#upload the data to the DataBucket\\n\",\"object = s3.Object(outputs[\\\"DataBucket\\\"],'train/data.csv')\\n\",\"object.upload_file(data) \\n\",\"print(\\\"data uploaded\\\")\"]},{\"cell_type\":\"markdown\",\"metadata\":{},\"source\":[\"You can also trigger a build by publishing to the launch topic directly\"]},{\"cell_type\":\"code\",\"execution_count\":null,\"metadata\":{\"collapsed\":true},\"outputs\":[],\"source\":[\"result=sns.publish(\\n\",\"    TopicArn=outputs['LaunchTopic'],\\n\",\"    Message=\\\"start\\\" #message is not important, just publishing to topic starts build\\n\",\")\\n\",\"print(\\\"message published\\\")\"]},{\"cell_type\":\"markdown\",\"metadata\":{},\"source\":[\"## Wait <a name=\\\"Wait\\\"></a>\\n\"]},{\"cell_type\":\"markdown\",\"metadata\":{},\"source\":[\"You can use the following code to get a notification \"]},{\"cell_type\":\"code\",\"execution_count\":null,\"metadata\":{\"collapsed\":true},\"outputs\":[],\"source\":[\"result=sns.subscribe(\\n\",\"    TopicArn=outputs['TrainStatusTopic'],\\n\",\"    Protocol=\\\"SMS\\\",\\n\",\"    Endpoint=\\\"x-xxx-xxx-xxxx\\\" #put your phone number here\\n\",\")\\n\",\"print(\\\"subscribed to topic\\\")\"]},{\"cell_type\":\"markdown\",\"metadata\":{},\"source\":[\"We can get the status of StateMachine as it builds and deploys our custom model. We can then setup a some code to wait for our build to complete\"]},{\"cell_type\":\"code\",\"execution_count\":null,\"metadata\":{},\"outputs\":[],\"source\":[\"%%time \\n\",\"#list all executions for our StateMachine to get our current running one\\n\",\"result=step.list_executions(\\n\",\"    stateMachineArn=outputs['StateMachine'],\\n\",\"    statusFilter=\\\"RUNNING\\\"\\n\",\")['executions']\\n\",\"\\n\",\"if len(result) > 0:\\n\",\"    response = step.describe_execution(\\n\",\"        executionArn=result[0]['executionArn']\\n\",\"    )\\n\",\"    status=response['status']\\n\",\"    print(status,response['name'])\\n\",\"    #poll status till execution finishes\\n\",\"    while status == \\\"RUNNING\\\":\\n\",\"        print('.',end=\\\"\\\")\\n\",\"        sleep(5)\\n\",\"        status=step.describe_execution(executionArn=result[0]['executionArn'])['status']\\n\",\"    print()\\n\",\"    print(status)\\n\",\"else:\\n\",\"    print(\\\"no running tasks\\\")\\n\"]},{\"cell_type\":\"markdown\",\"metadata\":{},\"source\":[\"## Use <a name=\\\"Use\\\"></a>\\n\",\"Next we get some data and send to our newly deployed endpoint!\"]},{\"cell_type\":\"code\",\"execution_count\":null,\"metadata\":{},\"outputs\":[],\"source\":[\"%%time \\n\",\"test_data=pd.read_csv(data, header=None).sample(10)\\n\",\"test_X=test_data.iloc[:,1:]\\n\",\"test_y=test_data.iloc[:,0]\\n\",\"\\n\",\"#convert test_X to csv\\n\",\"Body=str.encode(test_X.to_csv(header=False,index=False))\\n\",\"\\n\",\"result=sagemaker.invoke_endpoint(\\n\",\"    EndpointName=outputs['SageMakerEndpoint'],\\n\",\"    Body=Body,    \\n\",\"    ContentType=\\\"text/csv\\\",\\n\",\"    Accept=\\\"text/csv\\\"\\n\",\")\\n\",\"\\n\",\"print(pd.read_csv(StringIO(result['Body'].read().decode('utf-8')),header=None))\"]},{\"cell_type\":\"markdown\",\"metadata\":{},\"source\":[\"## Conclusion <a name=\\\"Conclusion\\\"></a>\\n\",\"\\n\",\"Hopefully SageBuild can help you develop and deploy SageMaker custom models faster and easier. If you have any problems please lets us none in our github issues [here](). Feel free to send us pull request!\"]}],\"metadata\":{\"kernelspec\":{\"display_name\":\"conda_python3\",\"language\":\"python\",\"name\":\"conda_python3\"},\"language_info\":{\"codemirror_mode\":{\"name\":\"ipython\",\"version\":3},\"file_extension\":\".py\",\"mimetype\":\"text/x-python\",\"name\":\"python\",\"nbconvert_exporter\":\"python\",\"pygments_lexer\":\"ipython3\",\"version\":\"3.6.2\"}},\"nbformat\":4,\"nbformat_minor\":2}}"
          }
        }
      }
    },
    "SageMakerNotebookInstance": {
      "Type": "Custom::SageMakerNotebookInstance",
      "Condition": "LaunchNoteBookInstance",
      "DependsOn": [
        "CFNLambdaPolicy"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SageMakerNotebookInstanceLambda",
            "Arn"
          ]
        },
        "InstanceType": "ml.t2.medium",
        "NotebookInstanceName": {
          "Ref": "AWS::StackName"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "NotebookRole",
            "Arn"
          ]
        }
      }
    },
    "NotebookRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "LaunchNoteBookInstance",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sagemaker.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          {
            "Ref": "NotebookPolicy"
          }
        ]
      }
    },
    "NotebookPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Roles": [
          {
            "Fn::If": [
              "AttachAccessPolicy",
              {
                "Ref": "AccessRoleArn"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sns:Publish"
              ],
              "Resource": [
                {
                  "Ref": "LaunchTopic"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeStacks"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "states:Describe*",
                "states:List*"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codecommit:*"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CodeRepo",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "sagemaker:InvokeEndpoint"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint/${Variables.EndpointName}"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:UpdateFunctionCode"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StepLambdaGetTrainingDockerfilePath",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "StepLambdaGetInferenceDockerfilePath",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "StepLambdaGetTrainingConfig",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "StepLambdaGetEndpointConfig",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::${DataBucket}/*"
                },
                {
                  "Fn::Sub": "arn:aws:s3:::${DataBucket}"
                }
              ]
            },
            {
              "Effect": "Deny",
              "Action": [
                "s3:DeleteBucket*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::${DataBucket}"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "sns:Subscribe",
                "sns:Unsubscribe",
                "sns:ListSubscriptions",
                "sns:ConfirmSubscription"
              ],
              "Resource": [
                {
                  "Ref": "TrainStatusTopic"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "sns:Publish"
              ],
              "Resource": [
                {
                  "Ref": "LaunchTopic"
                }
              ]
            }
          ]
        }
      }
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Automates the building and deployment of SageMaker custom models using StepFunctions and CodeBuild",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "General Configuration"
          },
          "Parameters": [
            "NoteBookInstanceType",
            "AccessRoleArn"
          ]
        },
        {
          "Label": {
            "default": "Data Bucket Configuration"
          },
          "Parameters": [
            "ExternalDataBucket",
            "ExternalLaunchTopic"
          ]
        },
        {
          "Label": {
            "default": "Repository Configuration"
          },
          "Parameters": [
            "BranchBuildTrigger",
            "ExternalCodeCommitRepo",
            "ExternalGithubRepo"
          ]
        }
      ],
      "ParameterLabels": {
        "NoteBookInstanceType": {
          "default": "SageMaker Notebook Instance Type"
        },
        "AccessRoleArn": {
          "default": "External Access Role Arn"
        },
        "ExternalDataBucket": {
          "default": "Training Data Bucket"
        },
        "BranchBuildTrigger": {
          "default": "Repository trigger branch"
        },
        "ExternalCodeCommitRepo": {
          "default": "AWS CodeCommit Repository"
        },
        "ExternalGithubRepo": {
          "default": "External Github Repository"
        },
        "ExternalLaunchTopic": {
          "default": "Additional SNS Launch Topic"
        }
      }
    }
  }
}