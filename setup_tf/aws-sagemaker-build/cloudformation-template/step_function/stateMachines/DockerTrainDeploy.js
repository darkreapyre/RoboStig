var fs=require('fs')
var _=require('lodash')
var Promise=require('bluebird')

module.exports={
    "Comment": "",
    "StartAt": "start",
    "States": {
        "start":{
            Type:"Pass",
            Next:"buildImages"
        },
        "buildImages":{
            Type: "Parallel",
            Branches:[build('Training'),build('Inference')],
            Next:"setUpTrain"
        },
        "setUpTrain":{
            Type:"Pass",
            Result:{    
                StackName:"${Variables.EndpointName}",
                SNSTopic:"${TrainStatusTopic}",
                model:{
                    role:"${ModelRole.Arn}"
                },
                Buckets:{
                    Artifact:"${ArtifactBucket}",
                    Data:"${Variables.DataBucket}"
                },
                endpoint:{},
                params:{
                    training:{
                        role:"${TrainingRole.Arn}"
                    },
                    endpoint:{
                    }
                },
                images:{
                    train:"${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepo}:Training",
                    inference:"${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepo}:Inference"
                }
            },
            Next:"setTime"
        },
        "setTime":{
            Type:"Task",
            Resource:"${StepLambdaSetTime.Arn}",
            ResultPath:'$',
            Next:"getTrainingConfig"
        },
        "getTrainingConfig":{
            Type:"Task",
            InputPath:"$",
            Resource:"${StepLambdaGetTrainingConfig.Arn}",
            ResultPath:"$.params.training.args",
            Next:"startTraining"
        },
        "startTraining":{
            Type:"Task",
            InputPath:"$",
            Resource:"${StepLambdaStartTraining.Arn}",
            ResultPath:"$.params.training.Arn",
            Next:"waitForTraining"
        },
        "waitForTraining":{
            Type:"Wait",
            Seconds:30,
            Next:"getTrainingStatus"
        },
        "getTrainingStatus":{
            Type:"Task",
            Resource:"${StepLambdaTrainingStatus.Arn}",
            ResultPath:"$",
            Next:"checkTrainingStatus"
        },
        "checkTrainingStatus":{
            Type:"Choice",
            Choices:[{
                Variable:`$.params.training.args.TrainingJobStatus`,
                StringEquals:"InProgress",
                Next:`waitForTraining` 
            },{
                Variable:`$.params.training.args.TrainingJobStatus`,
                StringEquals:"Completed",
                Next:`createModel` 
            }],
            Default:`trainingFail`
        },
        "trainingFail":{
            Type:"Task",
            Resource:"${StepLambdaNotificationFail.Arn}",
            Next:"Fail"
        },
        "createModel":{
            Type:"Task",
            Resource:"${StepLambdaCreateModel.Arn}",
            ResultPath:"$.model",
            Next:"getEndpointConfig"
        },
        "getEndpointConfig":{
            Type:"Task",
            InputPath:"$",
            Resource:"${StepLambdaGetEndpointConfig.Arn}",
            ResultPath:"$.params.endpoint.args",
            Next:"createEndpointConfig"
        },
        "createEndpointConfig":{
            Type:"Task",
            Resource:"${StepLambdaCreateEndpointConfig.Arn}",
            ResultPath:"$.endpoint",
            Next:"updateEndpoint"
        },
        "updateEndpoint":{
            Type:"Task",
            Resource:"${StepLambdaUpdateEndpoint.Arn}",
            Next:"waitForEndpoint"
        },
        "waitForEndpoint":{
            Type:"Wait",
            Seconds:10,
            Next:"endpointStatus"
        },
        "endpointStatus":{
            Type:"Task",
            Resource:"${StepLambdaEndpointStatus.Arn}",
            Next:"endpointCheck"
        },
        "endpointCheck":{
            Type:"Choice",
            Choices:[{
                Or:[{
                    Variable:`$.endpoint.EndpointStatus`,
                    StringEquals:"Creating",
                },{
                    Variable:`$.endpoint.EndpointStatus`,
                    StringEquals:"Updating",
                }],
                Next:`waitForEndpoint` 
            },{
                Variable:`$.endpoint.EndpointStatus`,
                StringEquals:"InService",
                Next:`Success` 
            }],
            Default:`endpointFail`
        },
        "endpointFail":{
            Type:"Task",
            Resource:"${StepLambdaNotificationFail.Arn}",
            Next:"Fail"
        },
        "Success": {
            Type:"Task",
            Resource:"${StepLambdaNotificationSuccess.Arn}",
            End:true
        },
        "Fail":{
            Type:"Fail"
        }
    }
}

function build(name){
    return {
        StartAt:`startBuildImage${name}`,
        States:_.mapKeys({
            "startBuildImage":{
                Type:"Pass",
                Result:{
                    projectName:"${ImageBuild}",
                    SNSTopic:"${TrainStatusTopic}",
                    tag:name
                },
                Next:`buildImagePath${name}`
            },
            "buildImagePath":{
                Type:"Task",
                Resource:`\${StepLambdaGet${name}DockerfilePath.Arn}`,
                ResultPath:`$.dockerfile_path`,
                Next:`buildImage${name}`
            },
            "buildImage":{
                Type:"Task",
                Resource:"${StepLambdaStartBuild.Arn}",
                ResultPath:`$.build.${name}`,
                Next:`wait${name}`
            },
            "wait":{
                Type:"Wait",
                Seconds:5,
                Next:`buildStatus${name}`
            },
            "buildStatus":{
                Type:"Task",
                Resource:"${StepLambdaBuildStatus.Arn}",
                InputPath:`$.build.${name}`,
                ResultPath:`$.build.${name}`,
                Next:`checkImage${name}`
            },
            "checkImage":{
                Type:"Choice",
                Choices:[{
                    Variable:`$.build.${name}.buildStatus`,
                    StringEquals:"IN_PROGRESS",
                    Next:`wait${name}` 
                },{
                    Variable:`$.build.${name}.buildStatus`,
                    StringEquals:"SUCCEEDED",
                    Next:`EndBuild${name}` 
                }],
                Default:`FailBuildNotification${name}`
            },
            "EndBuild":{
                Type:"Pass",
                End:true
            },
            "FailBuildNotification":{
                Type:"Task",
                Resource:"${StepLambdaNotificationFail.Arn}",
                Next:`FailBuild${name}`
            },
            "FailBuild":{
                Type:"Fail"
            }
        },(x,key)=>`${key}${name}`)
    }
}
